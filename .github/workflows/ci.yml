# RAGLite CI/CD Pipeline
# Optimized with UV package manager for 10-100x faster installs
# Supports self-hosted macOS runners with parallel execution
# Based on Powerpoint Agent Generator CI best practices
# Updated: 2025-10-12

name: CI

on:
  push:
    branches: [main, develop, "story/**", "epic/**"]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

# Restrict permissions (security best practice)
permissions:
  contents: read
  pull-requests: write
  checks: write

# Cancel in-progress runs for same branch/PR
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ============================================================================
  # JOB 1: Linting & Formatting
  # ============================================================================
  lint:
    name: Lint & Format Check
    runs-on: self-hosted
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Install dependencies with uv
        run: |
          uv venv ci-venv
          source ci-venv/bin/activate
          uv pip install ruff black isort

      - name: Run Ruff linter
        run: |
          source ci-venv/bin/activate
          ruff check . --output-format=github
        continue-on-error: true

      - name: Run Black formatter check
        run: |
          source ci-venv/bin/activate
          black --check --diff raglite/ tests/ scripts/
        continue-on-error: true

      - name: Run isort import check
        run: |
          source ci-venv/bin/activate
          isort --check-only --diff raglite/ tests/ scripts/
        continue-on-error: true

  # ============================================================================
  # JOB 2: Type Checking
  # ============================================================================
  type-check:
    name: Type Checking (mypy)
    runs-on: self-hosted
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Install dependencies with uv
        run: |
          uv venv ci-venv
          source ci-venv/bin/activate
          uv pip install -e .
          uv pip install mypy types-requests

      - name: Run mypy on raglite/ package
        run: |
          source ci-venv/bin/activate
          mypy raglite/ --show-error-codes --ignore-missing-imports
        continue-on-error: true

  # ============================================================================
  # JOB 3: Security Scanning
  # ============================================================================
  security:
    name: Security Scanning
    runs-on: self-hosted
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Install security scanning tools with uv
        run: |
          uv venv ci-venv
          source ci-venv/bin/activate
          uv pip install bandit[toml] safety
          uv pip install -e .

      - name: Run Bandit security linter
        run: |
          source ci-venv/bin/activate
          bandit -r raglite/ -f json -o bandit-report.json || true
        continue-on-error: true

      - name: Run Safety dependency scanner
        run: |
          source ci-venv/bin/activate
          safety check --json || true
        continue-on-error: true

      - name: Upload Bandit report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-security-report
          path: bandit-report.json
          retention-days: 30

  # ============================================================================
  # JOB 4: Unit Tests
  # ============================================================================
  test-unit:
    name: Unit Tests
    runs-on: self-hosted
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Install dependencies with uv
        run: |
          uv venv ci-venv
          source ci-venv/bin/activate
          uv pip install -e .
          uv pip install pytest pytest-cov pytest-asyncio pytest-xdist pytest-timeout

      - name: Run unit tests with coverage
        run: |
          source ci-venv/bin/activate
          pytest tests/unit/ \
            -n auto \
            --dist worksteal \
            --cov=raglite \
            --cov-report=xml \
            --cov-report=term-missing \
            --cov-report=html \
            --junitxml=pytest-unit-report.xml \
            -v

      - name: Upload unit test coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-unit
          path: |
            coverage.xml
            htmlcov/
            pytest-unit-report.xml
          retention-days: 30

  # ============================================================================
  # JOB 5: Integration Tests (requires Qdrant)
  # ============================================================================
  test-integration:
    name: Integration Tests
    runs-on: self-hosted
    timeout-minutes: 15
    needs: [test-unit]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Install dependencies with uv
        run: |
          uv venv ci-venv
          source ci-venv/bin/activate
          uv pip install -e .
          uv pip install pytest pytest-asyncio pytest-xdist pytest-timeout

      - name: Verify Qdrant is available
        run: |
          echo "Checking persistent Qdrant instance..."
          if curl -sf http://localhost:6333/collections > /dev/null; then
            echo "✅ Qdrant is available at localhost:6333"
          else
            echo "⚠️  Qdrant not available - tests may fail"
            echo "To start: docker run -d -p 6333:6333 --name raglite-qdrant qdrant/qdrant:v1.11.0"
            exit 1
          fi

      - name: Run integration tests
        env:
          QDRANT_HOST: localhost
          QDRANT_PORT: 6333
        run: |
          source ci-venv/bin/activate
          if [ -d "tests/integration" ] && [ -n "$(find tests/integration -name 'test_*.py' -type f)" ]; then
            pytest tests/integration/ \
              -v \
              --junitxml=pytest-integration-report.xml
          else
            echo "⚠️  No integration tests found, skipping..."
          fi
        continue-on-error: true

      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: pytest-integration-report.xml
          retention-days: 30

  # ============================================================================
  # JOB 6: E2E Tests
  # ============================================================================
  test-e2e:
    name: E2E Tests
    runs-on: self-hosted
    timeout-minutes: 15
    needs: [test-unit]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Install dependencies with uv
        run: |
          uv venv ci-venv
          source ci-venv/bin/activate
          uv pip install -e .
          uv pip install pytest pytest-asyncio pytest-timeout

      - name: Run E2E tests
        run: |
          source ci-venv/bin/activate
          if [ -d "tests/e2e" ] && [ -n "$(find tests/e2e -name 'test_*.py' -type f)" ]; then
            pytest tests/e2e/ \
              -v \
              --junitxml=pytest-e2e-report.xml
          else
            echo "⚠️  No E2E tests found, skipping..."
          fi

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: pytest-e2e-report.xml
          retention-days: 30

  # ============================================================================
  # JOB 7: Documentation Validation
  # ============================================================================
  docs-validation:
    name: Documentation Validation
    runs-on: self-hosted
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify required architecture docs exist
        run: |
          echo "Checking for required documentation files..."
          REQUIRED_DOCS=(
            "docs/architecture/1-introduction-vision.md"
            "docs/architecture/2-executive-summary.md"
            "docs/architecture/6-complete-reference-implementation.md"
            "docs/prd/index.md"
            "CLAUDE.md"
            "README.md"
          )

          MISSING=0
          for doc in "${REQUIRED_DOCS[@]}"; do
            if [ ! -f "$doc" ]; then
              echo "❌ Missing: $doc"
              MISSING=$((MISSING + 1))
            else
              echo "✅ Found: $doc"
            fi
          done

          if [ $MISSING -gt 0 ]; then
            echo "⚠️  $MISSING required documentation file(s) missing"
            exit 1
          else
            echo "✅ All required documentation files present"
          fi

  # ============================================================================
  # JOB 8: Build Summary
  # ============================================================================
  build-summary:
    name: CI Summary
    runs-on: self-hosted
    needs: [lint, type-check, security, test-unit, test-integration, test-e2e, docs-validation]
    if: always()

    steps:
      - name: Check all jobs status
        run: |
          echo "================================"
          echo "CI PIPELINE SUMMARY"
          echo "================================"
          echo "Lint: ${{ needs.lint.result }}"
          echo "Type Check: ${{ needs.type-check.result }}"
          echo "Security: ${{ needs.security.result }}"
          echo "Unit Tests: ${{ needs.test-unit.result }}"
          echo "Integration Tests: ${{ needs.test-integration.result }}"
          echo "E2E Tests: ${{ needs.test-e2e.result }}"
          echo "Documentation: ${{ needs.docs-validation.result }}"
          echo "================================"

          # Critical: Unit tests must pass
          if [[ "${{ needs.test-unit.result }}" == "failure" ]]; then
            echo "❌ Unit tests failed - blocking merge"
            exit 1
          fi

          # Critical: Linting must pass
          if [[ "${{ needs.lint.result }}" == "failure" ]]; then
            echo "❌ Linting failed - blocking merge"
            exit 1
          fi

          # Critical: Documentation must exist
          if [[ "${{ needs.docs-validation.result }}" == "failure" ]]; then
            echo "❌ Documentation validation failed - blocking merge"
            exit 1
          fi

          # Warnings for non-critical failures
          if [[ "${{ needs.type-check.result }}" == "failure" ]]; then
            echo "⚠️  Type checking issues detected (non-blocking)"
          fi

          if [[ "${{ needs.security.result }}" == "failure" ]]; then
            echo "⚠️  Security scan issues detected (non-blocking)"
          fi

          if [[ "${{ needs.test-integration.result }}" == "failure" ]]; then
            echo "⚠️  Integration test issues detected (non-blocking)"
          fi

          if [[ "${{ needs.test-e2e.result }}" == "failure" ]]; then
            echo "⚠️  E2E test issues detected (non-blocking)"
          fi

          echo "✅ All critical checks passed - ready to merge"
