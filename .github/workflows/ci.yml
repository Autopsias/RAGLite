# CI/CD Workflow - Auto-generated by workflow-installer
# Adapted with uv + Qdrant for RAGLite
# Configuration profile: advanced
# Language: python

name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Quality checks (linting, type checking, security)
  quality:
    name: Code Quality & Security
    runs-on: self-hosted  # Using local macOS runners

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Python 3.13 and uv 0.8.22 pre-installed on self-hosted runners
      # No setup steps needed

      - name: Install dependencies
        run: uv sync --frozen

      - name: Linting (Black)
        run: uv run black --check spike/ tests/
        continue-on-error: false

      - name: Linting (Ruff)
        run: uv run ruff check spike/ tests/

      - name: Linting (isort)
        run: uv run isort --check-only spike/ tests/
        continue-on-error: false

      # Markdown link checking disabled - container actions not supported on macOS self-hosted runners
      # For manual checks: npm install -g markdown-link-check && markdown-link-check docs/**/*.md

      - name: Verify BMAD standard files exist
        run: |
          test -f docs/architecture/coding-standards.md || (echo "Missing coding-standards.md" && exit 1)
          test -f docs/architecture/tech-stack.md || (echo "Missing tech-stack.md" && exit 1)
          test -f docs/architecture/source-tree.md || (echo "Missing source-tree.md" && exit 1)
          echo "✅ All BMAD standard files present"

      - name: Security scan (Safety)
        run: |
          pip install safety
          safety check --json || true
        continue-on-error: true

      # TruffleHog secret scanning disabled - container actions not supported on macOS self-hosted runners
      # For manual checks: brew install trufflesecurity/trufflehog/trufflehog && trufflehog git file://. --since-commit HEAD~1

  # Test matrix with parallel execution
  test-matrix:
    name: Tests - ${{ matrix.test-suite }}
    runs-on: self-hosted  # Using local macOS runners with persistent Qdrant
    strategy:
      fail-fast: false
      matrix:
        test-suite: ["unit", "integration", "e2e", "api", "database", "performance"]

    # Note: Qdrant runs persistently via Docker on self-hosted runners
    # No service container needed - tests connect to localhost:6333

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Python 3.13 and uv 0.8.22 pre-installed on self-hosted runners
      # No setup steps needed

      - name: Install dependencies
        run: uv sync --frozen

      - name: Verify Qdrant is available
        run: |
          echo "Checking persistent Qdrant instance..."
          if curl -sf http://localhost:6333/collections > /dev/null; then
            echo "✅ Qdrant is available at localhost:6333"
          else
            echo "⚠️  Qdrant not available - tests may fail"
            echo "To start: docker run -d -p 6333:6333 -p 6334:6334 --name raglite-qdrant qdrant/qdrant:v1.11.0"
          fi
        if: matrix.test-suite != 'unit'

      - name: Run tests
        id: run-tests
        env:
          QDRANT_HOST: localhost
          QDRANT_PORT: 6333
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          # Check if test directory exists
          if [ ! -d "tests/${{ matrix.test-suite }}" ]; then
            echo "⚠️  Test directory tests/${{ matrix.test-suite }}/ does not exist yet, skipping..."
            exit 0
          fi

          # Run pytest with appropriate settings
          uv run pytest tests/${{ matrix.test-suite }}/ \
            -n 4 \
            --dist worksteal \
            --cov=spike --cov=src --cov=raglite \
            --cov-report=xml \
            --cov-report=term-missing \
            -v

      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.test-suite }}
          path: coverage.xml
          retention-days: 1
        if: steps.run-tests.outcome == 'success' && hashFiles('coverage.xml') != ''

      # Codecov upload disabled for Week 0 spike phase
      # Coverage is still generated and uploaded as artifact (line 129-135)
      # Re-enable in Phase 1 when needed with proper token configuration
      # - name: Upload coverage to Codecov
      #   uses: codecov/codecov-action@v4
      #   with:
      #     token: ${{ secrets.CODECOV_TOKEN }}
      #     file: ./coverage.xml
      #     flags: ${{ matrix.test-suite }}
      #     name: codecov-${{ matrix.test-suite }}
      #     fail_ci_if_error: false
      #   if: hashFiles('coverage.xml') != ''

  # Deployment (only on main branch)
  deploy:
    name: Deploy to Production
    needs: [quality, test-matrix]
    runs-on: self-hosted  # Using local macOS runners
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy
        id: deploy
        run: |
          echo "Deployment steps go here"
          # Add your deployment commands
