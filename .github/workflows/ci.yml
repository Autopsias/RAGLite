# CI/CD Workflow - Auto-generated by workflow-installer
# Adapted with uv + Qdrant for RAGLite
# Configuration profile: advanced
# Language: python

name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Quality checks (linting, type checking, security)
  quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: uv sync --frozen

      - name: Linting (Black)
        run: uv run black --check spike/ tests/
        continue-on-error: false

      - name: Linting (Ruff)
        run: uv run ruff check spike/ tests/

      - name: Linting (isort)
        run: uv run isort --check-only spike/ tests/
        continue-on-error: false

      - name: Check Markdown files
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: 'yes'
          config-file: '.github/markdown-link-check-config.json'
        continue-on-error: true

      - name: Verify BMAD standard files exist
        run: |
          test -f docs/architecture/coding-standards.md || (echo "Missing coding-standards.md" && exit 1)
          test -f docs/architecture/tech-stack.md || (echo "Missing tech-stack.md" && exit 1)
          test -f docs/architecture/source-tree.md || (echo "Missing source-tree.md" && exit 1)
          echo "✅ All BMAD standard files present"

      - name: Security scan (Safety)
        run: |
          pip install safety
          safety check --json || true
        continue-on-error: true

      - name: Check for secrets in code
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
        continue-on-error: true

  # Test matrix with parallel execution
  test-matrix:
    name: Tests - ${{ matrix.test-suite }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        test-suite: ["unit", "integration", "e2e", "api", "database", "performance"]

    services:
      qdrant:
        image: qdrant/qdrant:v1.11.0
        ports:
          - 6333:6333

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: uv sync --frozen

      - name: Wait for Qdrant to be ready
        run: |
          echo "Waiting for Qdrant to start..."
          for i in {1..30}; do
            if curl -sf http://localhost:6333/collections > /dev/null; then
              echo "✅ Qdrant is ready"
              exit 0
            fi
            echo "Attempt $i: Qdrant not ready, waiting..."
            sleep 2
          done
          echo "❌ Qdrant failed to start"
          exit 1
        timeout-minutes: 2
        if: matrix.test-suite != 'unit'

      - name: Run tests
        id: run-tests
        env:
          QDRANT_HOST: localhost
          QDRANT_PORT: 6333
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          # Check if test directory exists
          if [ ! -d "tests/${{ matrix.test-suite }}" ]; then
            echo "⚠️  Test directory tests/${{ matrix.test-suite }}/ does not exist yet, skipping..."
            exit 0
          fi

          # Run pytest with appropriate settings
          uv run pytest tests/${{ matrix.test-suite }}/ \
            -n 4 \
            --dist worksteal \
            --cov=spike --cov=src --cov=raglite \
            --cov-report=xml \
            --cov-report=term-missing \
            -v

      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.test-suite }}
          path: coverage.xml
          retention-days: 1
        if: steps.run-tests.outcome == 'success' && hashFiles('coverage.xml') != ''

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: ${{ matrix.test-suite }}
          name: codecov-${{ matrix.test-suite }}
          fail_ci_if_error: false
        if: hashFiles('coverage.xml') != ''

  # Deployment (only on main branch)
  deploy:
    name: Deploy to Production
    needs: [quality, test-matrix]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy
        id: deploy
        run: |
          echo "Deployment steps go here"
          # Add your deployment commands
