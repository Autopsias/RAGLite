name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    services:
      qdrant:
        image: qdrant/qdrant:v1.11.0
        ports:
          - 6333:6333

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache Poetry installation
        uses: actions/cache@v4
        with:
          path: ~/.local
          key: poetry-${{ runner.os }}-${{ matrix.python-version }}

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            .venv
          key: poetry-deps-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            poetry-deps-${{ runner.os }}-${{ matrix.python-version }}-

      - name: Install dependencies
        run: |
          poetry config virtualenvs.in-project true
          poetry install --no-interaction --no-ansi --no-root

      - name: Wait for Qdrant to be ready
        run: |
          echo "Waiting for Qdrant to start..."
          for i in {1..30}; do
            if curl -sf http://localhost:6333/collections > /dev/null; then
              echo "✅ Qdrant is ready"
              exit 0
            fi
            echo "Attempt $i: Qdrant not ready, waiting..."
            sleep 2
          done
          echo "❌ Qdrant failed to start"
          exit 1
        timeout-minutes: 2

      - name: Run linting (black)
        run: poetry run black --check spike/
        continue-on-error: false

      - name: Run linting (ruff)
        run: poetry run ruff check spike/
        continue-on-error: false

      - name: Run linting (isort)
        run: poetry run isort --check-only spike/
        continue-on-error: false

      - name: Run tests
        id: run-tests
        env:
          QDRANT_HOST: localhost
          QDRANT_PORT: 6333
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          poetry run pytest spike/ \
            --cov=spike \
            --cov-report=xml \
            --cov-report=term-missing \
            -v

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
        if: matrix.python-version == '3.11'

      - name: Generate coverage report
        run: |
          poetry run coverage report --show-missing
        if: steps.run-tests.outcome == 'success' || steps.run-tests.outcome == 'failure'

  lint-docs:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check Markdown files
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: 'yes'
          config-file: '.github/markdown-link-check-config.json'
        continue-on-error: true

      - name: Verify BMAD standard files exist
        run: |
          test -f docs/architecture/coding-standards.md || (echo "Missing coding-standards.md" && exit 1)
          test -f docs/architecture/tech-stack.md || (echo "Missing tech-stack.md" && exit 1)
          test -f docs/architecture/source-tree.md || (echo "Missing source-tree.md" && exit 1)
          echo "✅ All BMAD standard files present"

  security:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: poetry install --no-interaction --no-root

      - name: Run safety check (dependency vulnerabilities)
        run: |
          pip install safety
          safety check --json || true
        continue-on-error: true

      - name: Check for secrets in code
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
        continue-on-error: true
