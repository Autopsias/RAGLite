[pytest]
# Test discovery paths
testpaths = spike tests raglite/tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Performance & Execution Options
# NOTE: Parallel execution (-n auto) is NOT in default addopts to allow VSCode Test Explorer
# to discover tests correctly. Add -n auto manually or use Makefile commands.
# NOTE: Coverage is NOT in addopts to fix VSCode Test Explorer compatibility
# Add --cov=raglite manually or use Makefile commands for coverage reports
addopts =
    -v
    --tb=short
    --strict-markers
    --strict-config
    --showlocals
    -ra
    --timeout=300
    # Show test durations to identify slow tests
    --durations=10
    --durations-min=1.0

# For parallel execution, use one of these methods:
# 1. Command line: pytest -n auto --dist loadfile
# 2. Makefile: make test (includes parallel execution)
# 3. Environment variable: PYTEST_XDIST_AUTO_NUM_WORKERS=auto pytest

# Async mode
asyncio_mode = auto

# Test markers for selective execution
markers =
    slow: marks tests as slow (deselect with '-m "not slow"')
    integration: marks tests as integration tests (require Qdrant)
    unit: marks tests as unit tests (no external dependencies)
    e2e: marks tests as end-to-end tests
    smoke: marks tests as smoke tests (quick validation)
    p0: marks tests as priority 0 (critical - must pass)
    p1: marks tests as priority 1 (high priority)
    p2: marks tests as priority 2 (medium priority)

# Performance optimizations
# Cache test results and only re-run changed tests (use --cache-clear to reset)
cache_dir = .pytest_cache

# xdist configuration for parallel execution
# LoadFileScheduling is enabled via --dist loadfile in addopts above
