[pytest]
# Test discovery paths
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Performance & Execution Options
# NOTE: Parallel execution enabled by default for faster test runs
#   - Unit tests run in parallel across all workers
#   - Integration tests run in single worker (grouped via xdist_group in conftest.py)
#   - This prevents Qdrant collection race conditions
# NOTE: Coverage is NOT in addopts to fix VSCode Test Explorer compatibility
# Add --cov=raglite manually or use Makefile commands for coverage reports
# NOTE: Slow tests (20+ min) are skipped by default using @pytest.mark.skipif
# To run slow tests explicitly: pytest --run-slow
addopts =
    -v
    --tb=short
    --strict-markers
    --strict-config
    --showlocals
    -ra
    --timeout=900
    # Show test durations to identify slow tests
    --durations=10
    --durations-min=1.0
    # Skip slow tests (20+ min) by default - Story 2.3 fix for CI performance
    # Run slow tests explicitly with: pytest -m slow
    -m "not slow"
    # Parallel execution DISABLED to prevent flaky tests from shared Qdrant state
    # Parallel execution (-n 2) causes random failures due to race conditions
    # Sequential execution guarantees 100% reliable results (trade: slower by ~3-5min)
    # To re-enable parallel execution: change -n 0 to -n 2
    -n 0
    # Automatic retry for flaky tests (pytest-rerunfailures)
    # DISABLED: Reruns waste time on deterministic slow tests (13+ min each)
    # Only useful for parallel execution race conditions (currently disabled with -n 0)
    # Re-enable ONLY if parallel execution is restored AND tests are genuinely flaky
    --reruns 0
    --reruns-delay 2
    --only-rerun AssertionError
    --only-rerun TimeoutError

# For sequential execution (debugging): pytest -n 0
# For custom worker count: pytest -n 4
# To disable retries (debugging): pytest --reruns 0

# Async mode
asyncio_mode = auto

# Warning filters
# Suppress third-party deprecation warnings that we cannot fix
# Keep warnings from our own code (raglite.*) visible for debugging
filterwarnings =
    # Suppress EasyOCR (Docling dependency) Pillow deprecation warnings
    # These will be fixed by EasyOCR maintainers before Pillow 13 (2026-10-15)
    ignore::DeprecationWarning:easyocr.*
    # Keep all warnings from raglite code visible
    default::DeprecationWarning:raglite.*
    default::PendingDeprecationWarning:raglite.*
    default::FutureWarning:raglite.*

# Timeout configuration
# Only apply timeout to test functions, NOT to fixtures (session-scoped ingestion takes 16-18 min)
timeout_func_only = true

# Test markers for selective execution
markers =
    slow: marks tests as slow (deselect with '-m "not slow"')
    integration: marks tests as integration tests (require Qdrant)
    unit: marks tests as unit tests (no external dependencies)
    e2e: marks tests as end-to-end tests
    smoke: marks tests as smoke tests (quick validation)
    p0: marks tests as priority 0 (critical - must pass)
    p1: marks tests as priority 1 (high priority)
    p2: marks tests as priority 2 (medium priority)

# Performance optimizations
# Cache test results and only re-run changed tests (use --cache-clear to reset)
cache_dir = .pytest_cache

# xdist configuration for parallel execution
# LoadFileScheduling is enabled via --dist loadfile in addopts above
